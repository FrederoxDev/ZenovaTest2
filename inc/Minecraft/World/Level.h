#pragma once
#include <string>
#include "Minecraft/Util/SharedPtr.h"
#include "Minecraft/World/BlockSource.h"
#include "Minecraft/World/LevelListener.h"
#include "Minecraft/World/Dimension.h"
#include "Minecraft/World/VanillaDimensionFactory.h"

class MapItemSavedData;
class ActorUniqueID;
class Player;
class ChangeDimensionRequest;
class Actor;
class Particle;
class ParticleType;
class BossEventUpdateType;
struct Tick;
enum Difficulty;
enum GameType;
class LevelChunk;
class LevelEvent;
class ActorEvent;
class LevelSoundEvent;
class ActorDefinitionIdentifier;
class AdventureSettings;
class BiomeComponentFactory;
class BiomeRegistry;
class BlockPalette;
class Scheduler;
class FeatureRegistry;
class FeatureTypeFactory;
class GameRules;
class JigsawStructureRegistry;
class StructureManager;
class _TickPtr;
class ActorDamageSource;
class IMinecraftEventing;
class BlockComponentFactory;
class LevelStorage;
class LevelSettings;
class SoundPlayer;
class ResourcePackManager;
class ActorRuntimeID;
class LevelData;
class ITickingArea;
class SurfaceBuilderRegistry;
class TagRegistry;
class IEntityRegistryOwner;
class BlockDefinitionGroup;

class Level {
private:
    void _cleanupDisconnectedPlayers();
    MapItemSavedData* _createMapSavedData(ActorUniqueID&);
    std::string _getValidatedPlayerName(std::string);
    void _handleChangeDimensionRequests();
    void _handlePlayerSuspension();
    void _loadAutonomousEntities();
    void _loadBiomeData();
    MapItemSavedData* _loadMapData(ActorUniqueID&);
    bool _playerChangeDimension(Player&, ChangeDimensionRequest&);
    void _saveAutonomousEntities();
    void _saveSomeChunks();
    void _syncTime(int);

public:
    virtual Actor* addAutonomousEntity(BlockSource&, UniquePtr<Actor, std::default_delete<Actor>>);
    virtual Actor* addEntity(BlockSource&, UniquePtr<Actor, std::default_delete<Actor>>);
    virtual Actor* addGlobalEntity(BlockSource&, UniquePtr<Actor, std::default_delete<Actor>>);
    void addListener(LevelListener&);
    Particle* addParticle(ParticleType, Vec3&, Vec3&, int, CompoundTag&, bool);
    virtual void addPlayer(UniquePtr<Player, std::default_delete<Player>>);
    void addTerrainParticleEffect(BlockPos&, Block&, Vec3&, float, float, float);
    virtual UniquePtr<Actor, std::default_delete<Actor>> borrowEntity(ActorUniqueID, LevelChunk&);
    void broadcastBossEvent(BossEventUpdateType);
    void broadcastDimensionEvent(BlockSource&, LevelEvent, Vec3&, int, Player&);
    void broadcastEntityEvent(Actor&, ActorEvent, int);
    void broadcastLevelEvent(LevelEvent, Vec3&, int, Player&);
    void broadcastLevelEvent(LevelEvent, CompoundTag&, Player&);
    void broadcastSoundEvent(BlockSource&, LevelSoundEvent, Vec3&, int, ActorDefinitionIdentifier&, bool, bool);
    bool checkAndHandleMaterial(AABB&, MaterialType, Actor&);
    bool copyAndLockMap(ActorUniqueID, ActorUniqueID);
    Dimension& createDimension(AutomaticID<Dimension, int>);
    MapItemSavedData* createMapSavedData(ActorUniqueID&, BlockPos&, AutomaticID<Dimension, int>, int);
    void denyEffect(Vec3&);
    bool destroyBlock(BlockSource&, BlockPos&, bool);
    void entityChangeDimension(Actor&, AutomaticID<Dimension, int>);
    ActorUniqueID expandMapByID(ActorUniqueID, bool);
    void explode(BlockSource&, Actor&, Vec3&, float, bool, bool, float, bool);
    bool extinguishFire(BlockSource&, BlockPos&, unsigned char);
    Actor* fetchEntity(ActorUniqueID, bool);
    Player* findPlayer(std::function<bool(const Player&)>);
    void forceRemoveEntity(Actor&);
    void forEachDimension(std::function<bool(Dimension&)>);
    void forEachPlayer(std::function<bool(Player&)>);
    AdventureSettings* getAdventureSettings();
    virtual BiomeComponentFactory* getBiomeComponentFactory();
    virtual BiomeRegistry* getBiomeRegistry();
    virtual BlockPalette* getBlockPalette();
    Tick getCurrentServerTick();
    Difficulty getDifficulty();
    Dimension* getDimension(AutomaticID<Dimension, int>);
    Factory<Dimension, Level&, Scheduler&> getDimensionFactory();
    FeatureRegistry* getFeatureRegistry();
    FeatureTypeFactory* getFeatureTypeFactory();
    GameRules* getGameRules();
    virtual JigsawStructureRegistry getJigsawStructureRegistry();
    MapItemSavedData getMapSavedData(ActorUniqueID);
    int getNewPlayerId();
    Color getPlayerColor(Player&);
    std::string* getPlayerPlatformOnlineId(UUID&);
    std::string* getPlayerXUID(UUID&);
    Player* getPrimaryLocalPlayer();
    Player* getRandomPlayer();
    Actor* getRuntimeEntity(ActorRuntimeID, bool); 
    float getSpecialMultiplier(AutomaticID<Dimension, int>);
    virtual StructureManager* getStructureManager();
    virtual SurfaceBuilderRegistry* getSurfaceBuilderRegistry();
    virtual TagRegistry* getTagRegistry();
    ITickingArea* getTickingArea(UUID&);
    bool hasCommandsEnabled();
    bool hasExperimentalGameplayEnabled();  
    virtual bool initialize(std::string&, LevelSettings&, LevelData&, std::string&);
    bool isPlayerSuspended(Player&);
    static bool isUsableLevel(Level&);
    Level(SoundPlayer&, UniquePtr<LevelStorage, std::default_delete<LevelStorage>>, IMinecraftEventing&, bool, Scheduler&, StructureManager&, ResourcePackManager&, IEntityRegistryOwner&, UniquePtr<BlockComponentFactory, std::default_delete<BlockComponentFactory>>, UniquePtr<BlockDefinitionGroup, std::default_delete<BlockDefinitionGroup>>);
    void onChunkDiscarded(LevelChunk&);
    virtual void onChunkLoaded(LevelChunk&);
    virtual void onNewChunk(BlockSource&, LevelChunk&);
    virtual void onNewChunkFor(Player&, LevelChunk&);
    virtual void onPlayerDeath(Player&, ActorDamageSource&);
    virtual void onSourceCreated(BlockSource&);
    virtual void onSourceDestroyed(BlockSource&);
    void playSound(BlockSource&, LevelSoundEvent, Vec3&, int, ActorDefinitionIdentifier&, bool, bool);
    void playSound(LevelSoundEvent, Vec3&, int, ActorDefinitionIdentifier&, bool, bool);
    void playSynchronizedSound(BlockSource&, LevelSoundEvent, Vec3&, int, ActorDefinitionIdentifier&, bool, bool);
    void potionSplash(Vec3&, Color&, bool);
    virtual void queueEntityRemoval(UniquePtr<Actor, std::default_delete<Actor>>, bool);
    virtual void removeEntityReferences(Actor&, bool);
    void removeListener(LevelListener&);
    void requestMapInfo(ActorUniqueID);
    void requestPlayerChangeDimension(Player&, UniquePtr<ChangeDimensionRequest, std::default_delete<ChangeDimensionRequest>>);
    void save();
    void saveBiomeData();
    void saveDirtyChunks();
    void saveGameData();
    void saveLevelData();
    void saveVillages();
    virtual void setCommandsEnabled(bool);
    void setDefaultGameType(GameType);
    virtual void setDifficulty(Difficulty);
    virtual void setFinishedInitializing();
    virtual void setWorldTemplateOptionsUnlocked();
    void spawnParticleEffect(std::string&, Vec3&, Dimension&);
    virtual void startLeaveGame();
    virtual UniquePtr<Actor, std::default_delete<Actor>> takeEntity(ActorUniqueID);
    virtual void tick();
    void tickEntities();
    void unregisterTemporaryPointer(_TickPtr&);
    void updateWeather(float, int, float, int); 
    virtual ~Level();
};